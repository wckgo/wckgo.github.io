(window.webpackJsonp=window.webpackJsonp||[]).push([[2],[,,,function(n,e,o){n.exports=o(4)},function(n,e,o){"use strict";o.r(e);var t=o(0),r=o(1),i=o(2);function a(){this.isStop||(this.renderLoopFuncs.forEach(n=>n.call(void 0)),requestAnimationFrame(a.bind(this)))}const c=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,{canvas:s,context:v,renderer:l}=function(){const n=document.createElement("canvas"),e=n.getContext("webgl2"),o=new t.y({canvas:n,context:e});return o.setSize(window.innerWidth,window.innerHeight),document.querySelector("#container").appendChild(o.domElement),{canvas:n,context:e,renderer:o}}(),{camera:f,controls:d}=function(n,e={fov:75,aspect:window.innerWidth/window.innerHeight,near:.1,far:1e3}){const o=new t.n(e.fov,e.aspect,e.near,e.far);return{camera:o,controls:new i.a(o,n)}}(s),x={r1:10,r2:3,p:7,q:4},g=new t.s,u=function(n){var e=(n=n||{}).geometry||new t.o(2,2,1),o=new t.r({vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nvarying vec2 vUv;\nvoid main() {\n  gl_Position = vec4(position, 1.0);\n  vUv = vec2(position.x, position.y) * 0.5 + 0.5;\n}",fragmentShader:'precision mediump float;\n#define GLSLIFY 1\n//\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_0(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_0(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_0(vec4 x)\n{\n  return mod289_0(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_0(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289_0(Pi0);\n  Pi1 = mod289_0(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute_0(permute_0(ix) + iy);\n  vec4 ixy0 = permute_0(ixy + iz0);\n  vec4 ixy1 = permute_0(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt_0(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt_0(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_1(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_1(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_1(vec4 x) {\n     return mod289_1(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_1(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_0 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_0;\n  vec3 i1 = min( g_0.xyz, l.zxy );\n  vec3 i2 = max( g_0.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_1(i);\n  vec4 p = permute_1( permute_1( permute_1(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt_1(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nfloat grain(vec2 texCoord, vec2 resolution, float frame, float multiplier) {\n    vec2 mult = texCoord * resolution;\n    float offset = snoise(vec3(mult / multiplier, frame));\n    float n1 = pnoise(vec3(mult, offset), vec3(1.0/texCoord * resolution, 1.0));\n    return n1 / 2.0 + 0.5;\n}\n\nfloat grain(vec2 texCoord, vec2 resolution, float frame) {\n    return grain(texCoord, resolution, frame, 2.5);\n}\n\nfloat grain(vec2 texCoord, vec2 resolution) {\n    return grain(texCoord, resolution, 0.0);\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend) {\n    return mix(\n        sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend), \n        2.0 * base * blend + base * base * (1.0 - 2.0 * blend), \n        step(base, vec3(0.5))\n    );\n}\n\n// Using conditionals\n// vec3 blendSoftLight(vec3 base, vec3 blend) {\n//     return vec3(\n//         ((blend.r < 0.5) ? (2.0 * base.r * blend.r + base.r * base.r * (1.0 - 2.0 * blend.r)) : (sqrt(base.r) * (2.0 * blend.r - 1.0) + 2.0 * base.r * (1.0 - blend.r))),\n//         ((blend.g < 0.5) ? (2.0 * base.g * blend.g + base.g * base.g * (1.0 - 2.0 * blend.g)) : (sqrt(base.g) * (2.0 * blend.g - 1.0) + 2.0 * base.g * (1.0 - blend.g))),\n//         ((blend.b < 0.5) ? (2.0 * base.b * blend.b + base.b * base.b * (1.0 - 2.0 * blend.b)) : (sqrt(base.b) * (2.0 * blend.b - 1.0) + 2.0 * base.b * (1.0 - blend.b)))\n//     );\n// }\n\nuniform vec3 color1;\nuniform vec3 color2;\nuniform float aspect;\nuniform vec2 offset;\nuniform vec2 scale;\nuniform float noiseAlpha;\nuniform bool aspectCorrection;\nuniform float grainScale;\nuniform float grainTime;\nuniform vec2 smooth;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec2 q = vec2(vUv - 0.5);\n  if (aspectCorrection) {\n    q.x *= aspect;\n  }\n  q /= scale;\n  q -= offset;\n  float dst = length(q);\n  dst = smoothstep(smooth.x, smooth.y, dst);\n  vec3 color = mix(color1, color2, dst);\n\n  if (noiseAlpha > 0.0 && grainScale > 0.0) {\n    float gSize = 1.0 / grainScale;\n    float g = grain(vUv, vec2(gSize * aspect, gSize), grainTime);\n    vec3 noiseColor = blendSoftLight(color, vec3(g));\n    gl_FragColor.rgb = mix(color, noiseColor, noiseAlpha);\n  } else {\n    gl_FragColor.rgb = color;\n  }\n  gl_FragColor.a = 1.0;\n}',side:t.f,uniforms:{aspectCorrection:{type:"i",value:!1},aspect:{type:"f",value:1},grainScale:{type:"f",value:.005},grainTime:{type:"f",value:0},noiseAlpha:{type:"f",value:.25},offset:{type:"v2",value:new t.w(0,0)},scale:{type:"v2",value:new t.w(1,1)},smooth:{type:"v2",value:new t.w(0,1)},color1:{type:"c",value:new t.d("#fff")},color2:{type:"c",value:new t.d("#283844")}},depthTest:!1}),r=new t.m(e,o);return r.frustumCulled=!1,r.style=function(n){if(n=n||{},Array.isArray(n.colors)){var e=n.colors.map((function(n){return"string"==typeof n||"number"==typeof n?new t.d(n):n}));o.uniforms.color1.value.copy(e[0]),o.uniforms.color2.value.copy(e[1])}"number"==typeof n.aspect&&(o.uniforms.aspect.value=n.aspect);"number"==typeof n.grainScale&&(o.uniforms.grainScale.value=n.grainScale);"number"==typeof n.grainTime&&(o.uniforms.grainTime.value=n.grainTime);if(n.smooth){var r=i(n.smooth,t.w);o.uniforms.smooth.value.copy(r)}if(n.offset){var a=i(n.offset,t.w);o.uniforms.offset.value.copy(a)}"number"==typeof n.noiseAlpha&&(o.uniforms.noiseAlpha.value=n.noiseAlpha);if(void 0!==n.scale){var c=n.scale;"number"==typeof c&&(c=[c,c]),c=i(c,t.w),o.uniforms.scale.value.copy(c)}void 0!==n.aspectCorrection&&(o.uniforms.aspectCorrection.value=Boolean(n.aspectCorrection))},n&&r.style(n),r;function i(n,e){return Array.isArray(n)?(new e).fromArray(n):n}}({aspect:f.aspect,grainScale:c?0:.001,colors:["#CCCCCC","#353535"]});u.renderOrder=-1,g.add(u),f.position.set(20*Math.sin(Math.PI/6),20*Math.tan(Math.PI/6),20*Math.cos(Math.PI/6)),g.add(f);const m=new t.a(16777215,.3),p=new t.j,y=new t.e(16777215,.8*Math.PI);y.position.set(5,0,8.66),g.add(m,p,y);const h=new t.i(100,10);g.add(h);const b=O(1e3,10,x.p,x.q,x.r1,x.r2,.5),z=new t.b,w=new t.h(new Float32Array(3*b.length),3);w.copyVector3sArray(b),z.setAttribute("position",w);const C=new t.t({vertexShader:"#version 300 es\n#define GLSLIFY 1\n\nout vec3 vColor;\n\nvoid main() \n{\n\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  vColor = normalize(position);\n\n}\n",fragmentShader:"#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nin vec3 vColor;\n\nout vec4 out_FragColor;\n\nvoid main() \n{\n\n\tout_FragColor = vec4( vColor, 1.0 );\n\n}\n"}),_=new t.k(z,C);g.add(_);const P=new t.b,S=Array(5e4).fill(0);S.forEach((n,e)=>S[e]=30*Math.random());const A=Array(15e4).fill(0),L=new t.h(new Float32Array(A),3),M=[],F=function(n,e,o=.25){const t=()=>{let r=0,i=0;for(;0===r;)r=Math.random();for(;0===i;)i=Math.random();let a=Math.sqrt(-2*Math.log(r))*Math.cos(2*Math.PI*i);return a=a/10+.5,(a>1||a<0)&&(a=t()),a=Math.pow(a,o),a*=e-n,a+=n,a};return t}(-5,2.5,.5);for(let n=0;n<5e4;n++)M.push(F(),F(),F());P.setAttribute("position",L),P.setAttribute("delay",new t.h(new Float32Array(S),1)),P.setAttribute("offsetVert",new t.h(new Float32Array(M),3));const I=new t.t({vertexShader:`#version 300 es\n#define ROUTER_LENGTH ${b.length}\n#define GLSLIFY 1\nin float delay;\nin vec3 offsetVert;\n\nuniform float pointSize;\nuniform float time;\nuniform float duration;\nuniform vec3[ROUTER_LENGTH] routers;\n\nout vec3 vColor;\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(1.29898,7.8233))));\n}\n\nvoid main()\n{\n  float routerLength = float(ROUTER_LENGTH);\n  float current = mod(time, duration + delay) - delay;\n  vec4 final;\n  if(current < 0.0) {\n    current = 0.0;\n    final = vec4(routers[0], 1.0);\n  } else {\n    float a = fract(current / duration);\n    float offset = (routerLength - 1.0) * a;\n    vec3 floorVec = routers[int(floor(offset))];\n    vec3 ceilVec = routers[int(ceil(offset))];\n    vec3 target = mix(floorVec, ceilVec, fract(offset));\n    mat4 mv = \n      mat4(\n        1, 0, 0, 0,\n        0, 1,  0, 0,\n        0, 0, 1, 0,\n        target.x , target.y, target.z, 1\n      )\n      *\n      mat4(\n        1, 0, 0, 0,\n        0, cos(time * 2.0), -sin(time * 2.0), 0,\n        0, sin(time * 2.0), cos(time * 2.0), 0,\n        0, 0, 0, 1\n      );\n    final = mv * vec4(offsetVert * smoothstep(0.0, 1.2, current / 3.0) * (1.0 + rand(vec2(time, length(offsetVert)))), 1.0);\n  }\n  vColor = normalize(final).xyz;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4(final);\n  gl_PointSize = pointSize;\n}`,fragmentShader:"#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nin vec3 vColor;\n\nout vec4 out_FragColor;\n\nvoid main() \n{\n\n\tout_FragColor = vec4( vColor, 1.0 );\n\n}\n",uniforms:{pointSize:{value:5},time:{value:0},duration:{value:30},routers:{value:b}}}),q=new t.p(P,I);g.add(q);const E=new class{constructor(n){this.renderLoopFuncs=new Set,this.isStop=!0,n&&this.start()}start(){this.isStop=!1,a.bind(this)()}stop(){this.isStop=!0}}(!0);E.renderLoopFuncs.add(()=>{d.update(),l.render(g,f)});const T=new t.c(!0);E.renderLoopFuncs.add(()=>{I.uniforms.time.value=T.getElapsedTime()});const G=new r.a({}),V=G.addFolder("Korus Knot"),D=V.add(x,"r1"),j=V.add(x,"r2"),U=V.add(x,"p"),N=V.add(x,"q"),R=()=>{const n=O(1e3,10,x.p,x.q,x.r1,x.r2,.5);w.copyVector3sArray(n),z.attributes.position.needsUpdate=!0,I.uniforms.routers.value=n};D.onChange(R),j.onChange(R),U.onChange(R),N.onChange(R);const Y=document.createElement("div");function H(n,e,o,r,i){const a=(r+i*Math.cos(e*n))*Math.cos(o*n),c=(r+i*Math.cos(e*n))*Math.sin(o*n),s=i*-Math.sin(e*n)+i;return new t.x(a,s,c)}function O(n,e,o,t,r,i,a){const c=[];for(let e=0;e<n;e++){const a=H(e/n*2*Math.PI,o,t,r,i);c.push(a)}return c}document.body.appendChild(Y),Y.classList.add("gui-wrap"),Y.appendChild(G.domElement),G.open()}],[[3,3,1,0]]]);